The following notes should allow you to install the LSST stack and the PFS DRP.
After the installation procedure example commands are given to show you how to
use the pipeline. The commands have been tested on an Arch Linux machine as well
as on Mac OS X.
The main goal of this quick-start guide is to enable the user to extract and 
wavelength calibrate an Arc spectrum.

* Install the LSST binary distribution >= 12.0 (https://pipelines.lsst.io/install/conda.html)
  Here it should not matter whether you install anaconda or miniconda. Please note that
  there's only a need to install lsst-distrib, not lsst-sims.
  Donâ€™t forget to setup the LSST environment as mentioned on the website. You will need
  to do this every time you want to use the pipeline in a new shell, so you might want
  to add these 2 lines to your .bashrc:

source activate lsst
source eups-setups.sh


* The test data are quite large (~38 MB) and are stored in git using git-lfs. We therefore
  need to install git-lfs (https://git-lfs.github.com/). Please follow the instructions at
  https://git-lfs.github.com to installing git-lfs (e.g. using homebrew on os/x), then type
  
  git lfs install

  There's no need to issue any "git lfs track" commands


* On Linux, all the anaconda packages were compiled with gcc 4.small and are incompatible
  with modern versions. Therefore, if you are installing the PFS DRP on a Linux machine, 
  install gcc in anaconda:

conda install gcc


* For convenience of this quick-start guide, create a directory for the PFS-DRP repositories:

export PFS_DRP=<your_target_directory>
(e.g. export PFS_DRP=$HOME/PFS
mkdir -p $PFS_DRP
cd $PFS_DRP


* Clone the relevant git repositories. Note that currently a newer version of sconsUtils
  is needed to suppress some irrelevant compiler warnings. Installing and setting up
  sconsUtils will be obsolete in the next binary LSST Stack installation.

git clone https://github.com/Subaru-PFS/drp_stella.git
git clone https://github.com/Subaru-PFS/drp_stella_data.git
git clone https://github.com/Subaru-PFS/obs_pfs.git
git clone git@github.com:lsst/sconsUtils.git

* The next 2 steps are temporary workarounds until fixed:
* Set $EUPS_PKGROOT

export EUPS_PKGROOT="https://sw.lsstcorp.org/eupspkg/"


* Install Eigen with the unsupported modules:

eups distrib install eigen 3.2.5.lsst2


* Build and setup the pipeline. Note that setting up drp_stella will overwrite
  the already set up sconsUtils version with the standard one, so we need to
  setup sconsUtils again before compiling drp_stella. There are a few warnings
  when compiling drp_stella, one type of warnings is a doxygen warning "... not
  found in argument list..." and the other is a SWIG problem ("...destination for
  this 'memset' call is a pointer..."). Both types of warnings will be silenced 
  in future version and can be safely ignored.

cd $PFS_DRP/sconsUtils
git checkout w.2016.34
setup -r .
scons -Q opt=3 -j8 --filterWarn

cd $PFS_DRP/obs_pfs
setup -r .
scons -Q opt=3 -j8 --filterWarn

cd $PFS_DRP/drp_stella_data
setup -r .

cd $PFS_DRP/drp_stella
setup -r .
setup -r ../sconsUtils
scons -Q opt=3 -j8 --filterWarn


* Now for using the pipeline. 
Raw test data are in $DRP_STELLA_DATA_DIR/tests/data/raw/:
  - 3 Biases: visit numbers 7251-7253,
  - 3 Darks: visit numbers 7291-7293,
  - 1 Flat: visit number 5,
  - 1 Arc: visit number 4 
Configuration parameters can be set either in config files (see $OBS_PFS_DIR/config/pfs/) or
by passing them on the command line (after "--config", e.g. --config isr.doDark=False). 
First we need to create a directory (actually 2) where we want to store pipeline outputs. 
Let's assume you want to store the pipeline outputs in a directory $HOME/spectra/PFS:

export PFS_DATA=$HOME/spectra/PFS
mkdir -p $PFS_DATA/CALIB


* We need to tell the LSST stack which mapper to use:

echo "lsst.obs.pfs.PfsMapper" > $PFS_DATA/_mapper


* To ingest the raw images into a database stored in $PFS_DATA/registry.sqlite3:

cd $PFS_DATA
ingestImages.py . $DRP_STELLA_DATA_DIR/tests/data/raw/*.fits --output . --mode link


* Now that we have our database we can start reducing things. We start with creating a master Bias, followed
by a Bias-subtracted master Dark. We will then create a Bias- and Dark-subtracted master Flat, which we then use 
to identify and trace the apertures of the fiber traces. The fiber traces from the Arc image are then extracted
and wavelength calibrated.

The data we want to reduce were observed/simulated on 2015-12-22 on spectrograph 2, arm r (red) at site S (Summit). 

Note the 2 config parameters --nodes and --procs at the end. These parameters are required by tasks which are 
parallelized. Sometimes running the code in parallel can lead to problems (in most cases caused by the 3rd-party 
libraries used), so setting nodes and procs to 1 is a safe choice.

constructBias.py . --calib CALIB --output . --calibId calibVersion=bias arm=r calibDate=2015-12-22 spectrograph=2 --do-exec --id field=BIAS dateObs=2015-12-22 --nodes 1 --procs 1


* Now that we have a master bias we need to ingest that into our calibration database stored in
$PFS_DATA/CALIB/calibRegistry.sqlite3:

genCalibRegistry.py --root CALIB --camera PFS --validity 180


* Now we can create a Bias-subtracted master Dark and ingest that into our calibration database. If you don't want 
Dark subtraction you can skip this step, but remember further down to turn Dark subtraction off:

constructDark.py . --calib CALIB --output . --calibId calibVersion=dark arm=r calibDate=2015-12-22 spectrograph=2 --do-exec --id field=DARK dateObs=2015-12-22 --nodes 1 --procs 1
genCalibRegistry.py --root CALIB --camera PFS --validity 180


* Having the master Bias and Dark, we can now create our master Flat. Currently the master Flat is only used to 
trace the apertures of the fiber traces. If you want to turn off Dark subtraction you can either edit the config
file $OBS_PFS_DIR/config/pfs/flat.py or simply add "--config isr.doDark=False" to the reduceFlat command, what
will override the parameter setting in the config file:

reduceFlat.py . --calib CALIB --calibId calibVersion=flat arm=r calibDate=2015-12-22 filter=r spectrograph=2 --do-exec --id field=FLAT arm=r dateObs=2015-12-22 spectrograph=2 --output . --nodes 1 --procs 1
genCalibRegistry.py --root=CALIB --camera PFS --validity 180


* Since we have the Bias and Dark we can also run the Instrumental-Signature Removal (ISR) task for our Arc spectrum.
Again, if you don't want Dark subtraction, either edit the config file $OBS_PFS_DIR/config/pfs/detrend.py or add 
"--config isr.doDark=False" at the end of the command:

detrend.py . --calib CALIB --output . --id arm=r spectrograph=2 dateObs=2015-12-22 field=ARC


* We now have the postISRCCD images and can extract and wavelength-calibrate our CdHgKrNeXe Arc with the visit
number 4:

reduceArc.py . --output . --calib CALIB --id visit=4 --wLenFile $OBS_PFS_DIR/pfs/RedFiberPixels.fits.gz --lineList $OBS_PFS_DIR/pfs/lineLists/CdHgKrNeXe_red.fits
