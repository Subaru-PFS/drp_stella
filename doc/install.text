The following notes should allow you to install the LSST stack and the PFS DRP.
After the installation procedure example commands are given to show you how to
use the pipeline. The commands have been tested on an Arch Linux machine as well
as on Mac OS X.

* Install lsst binary distribution (https://pipelines.lsst.io/install/conda.html)
* Install git-lfs (https://git-lfs.github.com/)
* Install matplotlib:

conda install matplotlib


If you have a very fresh compiler version, this could lead to incompatibilities 
with the precompiled LSST stack. In case you run into trouble compiling or testing
the LSST stack please install your compiler in anaconda:

conda install gcc


* Create a directory for the PFS-DRP repositories:

mkdir ~/stella-git
cd ~/stella-git

* Clone the relevant git repositories:

git clone https://github.com/Subaru-PFS/drp_stella.git
git clone https://github.com/Subaru-PFS/drp_stella_data.git
git clone https://github.com/Subaru-PFS/obs_pfs.git


* Install a newer version of eigen:

eups distrib install eigen 3.2.5.lsst2


* Declare the git repositories in Linux (replace <Linux64> with <DarwinX86> for Mac OS X):

eups declare obs_pfs 1.0 -c -f Linux64 -r ~/stella-git/obs_pfs
eups declare drp_stella_data 1.0 -c -f Linux64 -r ~/stella-git/drp_stella_data
eups declare drp_stella 1.0 -c -f Linux64 -r ~/stella-git/drp_stella


* Setup the pipeline. As obs_pfs and drp_stella_data are required packages they are set up automatically:

setup drp_stella 1.0 -v

During this step the environment variables $DRP_STELLA_DIR, $DRP_STELLA_DATA_DIR, and $OBS_PFS_DIR are automatically 
created as well:

echo $DRP_STELLA_DIR

should show you:

~/stella-git/drp_stella


* Build the pipeline:

cd drp_stella
scons opt=3 -j8


* Create the defects database (done during compilation of the code):

cd ../obs_pfs
scons opt=3 -j8


* Now for using the pipeline. Raw test data are in $DRP_STELLA_DATA_DIR/tests/data/raw/ (3 Biases, 3 Darks, 1 Flat, 1 Arc). 
First we need to create a directory (actually 2) where we want to store pipeline outputs. 
Let's assume you have a directory ~/spectra and do everything related to spectra there:

mkdir ~/spectra/PFS
mkdir ~/spectra/PFS/CALIB


* Configuration parameters can be passed to the pipeline task either on the command line or in a config file 
(e.g. $OBS_PFS_DIR/config/pfs/ingest.py, see following example). You can list all possible configuration parameters by 
appending a "--show config" to the parameter list.
To ingest the raw images:

cd ~/spectra
ingestImages.py PFS $DRP_STELLA_DATA_DIR/tests/data/raw/*.fits --output=PFS --mode=link -C $OBS_PFS_DIR/config/pfs/ingest.py


* You can now inspect the created SQL database with e.g. sqlitebrowser (http://sqlitebrowser.org/).
Now that we have our database we can start reducing things. We should probably start with the Biases. If the biases we
want to reduce were observed on 2015-12-22 on spectrograph 2, arm red (r) at site S:

reduceBias.py PFS --calib PFS/CALIB --output PFS --calibId calibVersion=bias arm=r calibDate=2015-12-22 spectrograph=2 --do-exec --id field=BIAS dateObs=2015-12-22 --clobber-config --nodes=1 --procs=1


* Note the 2 config parameters --nodes and --procs at the end. These parameters are required by tasks which are 
parallelized. Sometimes running the code in parallel can lead to problems (in most cases caused by the 3rd-party libraries
used), so setting nodes and procs to 1 is a safe choice. —-clobber-config is needed if you re-run the task with different
config parameters. The config used for each run is written to PFS/config/bias.py and the task won’t run again if you 
change parameters, unless you say —-clobber-config.

* Now that we have a master bias we need to inject that too into our database:

genCalibRegistry.py --root=PFS/CALIB --camera PFS --validity 180

* Now we can create a bias-subtracted Dark and ingest that into our database:

reduceDark.py PFS --calib PFS/CALIB --output PFS --calibId calibVersion=dark arm=r calibDate=2015-12-22 spectrograph=2 --do-exec --id field=DARK dateObs=2015-12-22 --nodes=1 --procs=1 -C ~/stella-git/obs_pfs/config/pfs/dark.py
genCalibRegistry.py --root=PFS/CALIB --camera PFS --validity 180

* and a bias and dark-subtracted flat (currently only used to trace the apertures of the fiber traces). Note that in this
example we set the config parameters isr.doBias and isr.doDark to True after <—-config > (instead of the parameter file
after <-C > in the ingestImages.py example above):

reduceFlat.py PFS --calib PFS/CALIB --calibId calibVersion=flat arm=r calibDate=2015-12-22 filter=r spectrograph=2 --do-exec --id field=FLAT arm=r dateObs=2015-12-22 spectrograph=2 --loglevel info --config isr.doBias=True isr.doDark=True isr.doLinearize=False --output PFS --nodes=1 --procs=1 --clobber-config

genCalibRegistry.py --root=PFS/CALIB --camera PFS --validity 180

* Since we have the Bias and Dark we can also run the Instrumental-Signature Removal (ISR) task for our Arc spectrum:

detrend.py PFS --calib=PFS/CALIB --id arm=r spectrograph=2 dateObs=2015-12-22 field=ARC -C ~/stella-git/obs_pfs/config/pfs/detrend.py --output PFS

* We now have the postISRCCD images and can extract and wavelength-calibrate our CdHgKrNeXe Arc with the visit
number 4:

reduceArc.py PFS --id visit=4 --wLenFile $OBS_PFS_DIR/pfs/RedFiberPixels.fits.gz --lineList $OBS_PFS_DIR/pfs/lineLists/CdHgKrNeXe_red.fits --loglevel info --calib PFS/CALIB/ --output PFS
