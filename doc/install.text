The following notes should allow you to install the LSST stack and the PFS DRP.
After the installation procedure example commands are given to show you how to
use the pipeline. The commands have been tested on an Arch Linux machine as well
as on Mac OS X.

* Install the LSST binary distribution (https://pipelines.lsst.io/install/conda.html)
  Here it should not matter whether you install anaconda or miniconda. Don’t forget
  to setup the LSST environment as mentioned on the website:

source activate lsst
source eups-setups.sh


* Install git-lfs (https://git-lfs.github.com/)
* Install matplotlib and gcc:

conda install matplotlib gcc


* Create a directory for the PFS-DRP repositories:

export DRP_STELLA=“<your_target_directory>”
(e.g. export DRP_STELLA="~/stella-git")
mkdir -p $DRP_STELLA
cd $DRP_STELLA


* Clone the relevant git repositories:

git clone https://github.com/Subaru-PFS/drp_stella.git
git clone https://github.com/Subaru-PFS/drp_stella_data.git
git clone https://github.com/Subaru-PFS/obs_pfs.git


* Set $EUPS_PKGROOT

export EUPS_PKGROOT="https://sw.lsstcorp.org/eupspkg/"


* Install Eigen with the unsupported modules:

eups distrib install eigen 3.2.5.lsst2


* Declare the git repositories:

eups declare obs_pfs 0.1 -c -r $DRP_STELLA/obs_pfs
eups declare drp_stella_data 0.1 -c -r $DRP_STELLA/drp_stella_data
eups declare drp_stella 0.1 -c -r $DRP_STELLA/drp_stella


* Setup the pipeline. As obs_pfs and drp_stella_data are required packages they are set up automatically:

setup drp_stella 0.1 -v

During this step the environment variables $DRP_STELLA_DIR, $DRP_STELLA_DATA_DIR, and $OBS_PFS_DIR are 
automatically created as well:

echo $DRP_STELLA_DIR

should show you:

$DRP_STELLA/drp_stella


* Build the pipeline:

cd $DRP_STELLA/drp_stella
scons opt=3
cd ../obs_pfs
scons opt=3


* Now for using the pipeline. Raw test data are in $DRP_STELLA_DATA_DIR/tests/data/raw/ (3 Biases, 3 Darks, 1 Flat, 1 Arc). 
First we need to create a directory (actually 2) where we want to store pipeline outputs. 
Let's assume you want to store the pipeline outputs in a directory ~/spectra/PFS:

export SPECTRA_DIR="~/spectra/PFS"
mkdir -p $SPECTRA_DIR/CALIB


* We need to tell the LSST stack which mapper to use:

echo "lsst.obs.pfs.PfsMapper" > $SPECTRA_DIR/_mapper


* Configuration parameters can be passed to the pipeline task either on the command line or in a config file 
(e.g. $OBS_PFS_DIR/config/pfs/ingest.py, see following example). You can list all possible configuration parameters by 
appending a "--show config" to the parameter list.
To ingest the raw images:

cd $SPECTRA_DIR
ingestImages.py . $DRP_STELLA_DATA_DIR/tests/data/raw/*.fits --output=. --mode=link


* Now that we have our database we can start reducing things. We start with reducing the Biases. The data we
want to reduce were observed on 2015-12-22 on spectrograph 2, arm blue (b) at site S:

reduceBias.py . --calib CALIB --output . --calibId calibVersion=bias arm=b calibDate=2015-12-22 spectrograph=2 --do-exec --id field=BIAS dateObs=2015-12-22 --nodes=1 --procs=1


* Note the 2 config parameters --nodes and --procs at the end. These parameters are required by tasks which are 
parallelized. Sometimes running the code in parallel can lead to problems (in most cases caused by the 3rd-party libraries
used), so setting nodes and procs to 1 is a safe choice.

* Now that we have a master bias we need to inject that too into our database:

genCalibRegistry.py --root=CALIB --camera PFS --validity 180

* Now we can create a bias-subtracted Dark and ingest that into our database:

reduceDark.py . --calib CALIB --output . --calibId calibVersion=dark arm=b calibDate=2015-12-22 spectrograph=2 --do-exec --id field=DARK dateObs=2015-12-22 --nodes=1 --procs=1
genCalibRegistry.py --root=CALIB --camera PFS --validity 180

* and a bias and dark-subtracted flat (currently only used to trace the apertures of the fiber traces):

reduceFlat.py . --calib CALIB --calibId calibVersion=flat arm=b calibDate=2015-12-22 filter=b spectrograph=2 --do-exec --id field=FLAT arm=b dateObs=2015-12-22 spectrograph=2 --output . --nodes=1 --procs=1

genCalibRegistry.py --root=CALIB --camera PFS --validity 180

* Since we have the Bias and Dark we can also run the Instrumental-Signature Removal (ISR) task for our Arc spectrum:

detrend.py PFS --calib=PFS/CALIB --id arm=r spectrograph=2 dateObs=2015-12-22 field=ARC -C ~/stella-git/obs_pfs/config/pfs/detrend.py --output PFS

* We now have the postISRCCD images and can extract and wavelength-calibrate our CdHgKrNeXe Arc with the visit
number 4:

reduceArc.py PFS --id visit=4 --wLenFile $OBS_PFS_DIR/pfs/RedFiberPixels.fits.gz --lineList $OBS_PFS_DIR/pfs/lineLists/CdHgKrNeXe_red.fits --loglevel info --calib PFS/CALIB/ --output PFS
