from types import SimpleNamespace

import lsst.utils.tests
from lsst.daf.base import PropertyList

from pfs.drp.stella.readLineList import ReadLineListTask
from pfs.drp.stella.tests.utils import runTests
from pfs.drp.stella.synthetic import SyntheticConfig, makeSyntheticDetectorMap

display = None


class Line(SimpleNamespace):
    """Struct describing a line in our lineList

    Parameters
    ----------
    wavelength : `float`
        Line wavelength (nm).
    intensity : `float`
        Line intensity (arbitrary units).
    description : `str`
        Line ionic species.
    flag : `int`
        If non-zero, indicates the line should not be used for some reason.
    """
    def __init__(self, wavelength, intensity, description, flag):
        super().__init__(wavelength=wavelength, intensity=intensity, description=description, flag=flag)


class ReadLineListTestCase(lsst.utils.tests.TestCase):
    def setUp(self):
        """Define the lineList"""
        self.contents = [
            Line(123.456, 1000, "NeI", 0),
            Line(456.789, 1000, "NeI", 0),
            Line(567.890, 999, "ArI", 0),
            Line(678.901, 1001, "KrI", 0),
            Line(789.012, 100000, "ArI", 1),  # Flagged
            Line(1023.456, 1000, "NeI", 0),
        ]
        self.config = ReadLineListTask.ConfigClass()
        self.config.restrictByLamps = False

    def makeLineList(self, **kwargs):
        """Generate a lineList from the defined contents

        The lineList is generated by writing it to a file, and then using the
        `ReadLineListTask` to read it in.

        Returns the results of running the `ReadLineListTask`.
        """
        with lsst.utils.tests.getTempFilePath(".txt") as filename:
            with open(filename, "w") as fd:
                fd.write("# This is a fake line list\n")
                for line in self.contents:
                    fd.write(f"{line.wavelength} {line.intensity} {line.description} {line.flag}\n")
            self.config.lineListFiles = [filename]
            task = ReadLineListTask(name="readLineList", config=self.config)
            return task.run(**kwargs)

    def assertLineList(self, lineList, expect):
        """Check that the line list as expected

        Parameters
        ----------
        lineList : iterable of `pfs.drp.stella.ReferenceLineList`
            Line list read with `ReadLineListTask`.
        expect : iterable of `Line`
            Expected lines in the list.
        """
        self.assertEqual(len(lineList), len(expect))
        for ll, ex in zip(lineList, expect):
            self.assertEqual(ll.wavelength, ex.wavelength)
            self.assertEqual(ll.intensity, ex.intensity)
            self.assertEqual(ll.description, ex.description)

    def testBasic(self):
        """Test that we can read a line list"""
        lineList = self.makeLineList()
        self.assertLineList(lineList, self.contents)

    def testLamps(self):
        """Test that we can select lines by lamp"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 1)  # Argon
        metadata.set("W_AITKRY", 0)  # Krypton
        self.config.restrictByLamps = True
        lineList = self.makeLineList(metadata=metadata)
        expect = [ll for ll in self.contents if ll.description == "ArI"]
        assert len(expect) == 2  # Two lines are Argon
        self.assertLineList(lineList, expect)

    def testMinIntensity(self):
        """Test that we can select lines by applying minIntensity cut"""
        self.config.minIntensity = 1000
        lineList = self.makeLineList()
        expect = [ll for ll in self.contents if ll.intensity >= self.config.minIntensity]
        assert len(expect) == 5
        self.assertLineList(lineList, expect)

    def testDetectorMap(self):
        """Test that we can get a wavelength-filtered lineList"""
        minWl = 400.0
        maxWl = 950.0
        synth = SyntheticConfig()
        detMap = makeSyntheticDetectorMap(synth, minWl, maxWl)
        lineList = self.makeLineList(detectorMap=detMap)
        expect = [ll for ll in self.contents if ll.wavelength > minWl and ll.wavelength < maxWl]
        for ff in synth.fiberId:
            self.assertLineList(lineList, expect)


class TestMemory(lsst.utils.tests.MemoryTestCase):
    pass


def setup_module(module):
    lsst.utils.tests.init()


if __name__ == "__main__":
    runTests(globals())
