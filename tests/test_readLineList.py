from types import SimpleNamespace
import numpy as np

import lsst.utils.tests
from lsst.daf.base import PropertyList

from pfs.drp.stella.readLineList import ReadLineListTask, ReadLineListConfig
from pfs.drp.stella.referenceLine import ReferenceLine, ReferenceLineSet, ReferenceLineStatus
from pfs.drp.stella.referenceLine import ReferenceLineSource
from pfs.drp.stella.tests.utils import runTests
from pfs.drp.stella.synthetic import SyntheticConfig, makeSyntheticDetectorMap

display = None


class Line(SimpleNamespace):
    """Struct describing a line in our lineList

    Parameters
    ----------
    wavelength : `float`
        Line wavelength (nm).
    intensity : `float`
        Line intensity (arbitrary units).
    description : `str`
        Line ionic species.
    flag : `int`
        If non-zero, indicates the line should not be used for some reason.
    """
    def __init__(self, wavelength, intensity, description, flag, transition="UNKNOWN",
                 status=ReferenceLineSource.NONE):
        super().__init__(wavelength=wavelength, intensity=intensity, description=description, flag=flag,
                         transition=transition, status=status)


class ReadLineListTestCase(lsst.utils.tests.TestCase):
    def setUp(self):
        """Define the lineList"""
        self.contents = [
            Line(123.456, 1000, "NeI", 0),
            Line(456.789, 1000, "NeI", 0),
            Line(567.890, 999, "ArI", 0),
            Line(678.901, 1001, "KrI", 0),
            Line(789.012, 100000, "ArI", 1),  # Flagged
            Line(890.123, 123, 'HgII', 0),
            Line(901.123, 14, 'HgI', 0),
            Line(1023.456, 1000, "NeI", 0),
            Line(1050.456, 100, "XeI", 0),
        ]
        self.config = ReadLineListTask.ConfigClass()

    def makeLineList(self, lightSource='fake', **kwargs):
        """Generate a lineList from the defined contents

        The lineList is generated by writing it to a file, and then using the
        `ReadLineListTask` to read it in.

        Returns the results of running the `ReadLineListTask`.
        """
        with lsst.utils.tests.getTempFilePath(".txt") as filename:
            with open(filename, "w") as fd:
                fd.write("# This is a fake line list\n")
                for line in self.contents:
                    fd.write(f"{line.wavelength} {line.intensity} {line.description} {line.flag}\n")
            self.config.lightSourceMap = {lightSource: filename}
            self.config.lightSources = [lightSource]
            task = ReadLineListTask(name="readLineList", config=self.config)
            return task.run(**kwargs)

    def assertLineList(self, lineList, expect):
        """Check that the line list as expected

        Parameters
        ----------
        lineList : iterable of `pfs.drp.stella.ReferenceLineList`
            Line list read with `ReadLineListTask`.
        expect : iterable of `Line`
            Expected lines in the list.
        """
        def orderLineList(lineList):
            return sorted(lineList, key=lambda refLine: refLine.wavelength)

        self.assertEqual(len(lineList), len(expect))
        for ll, ex in zip(orderLineList(lineList),
                          orderLineList(expect)):
            self.assertEqual(ll.wavelength, ex.wavelength)
            self.assertEqual(ll.intensity, ex.intensity)
            self.assertEqual(ll.description, ex.description)

    def testBasic(self):
        """Test that we can read a line list"""
        lineList = self.makeLineList()
        self.assertLineList(lineList, self.contents)

    def testLampsArgon(self):
        """Test that we can select Argon-I lines by lamp"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 1)  # Argon
        metadata.set("W_AITKRY", 0)  # Krypton
        species = ['ArI']
        self.config.lampElements = species
        lineList = self.makeLineList(lightSource='Ar', metadata=metadata)
        expect = [ll for ll in self.contents if ll.description in species]
        assert len(expect) == 2  # Two lines are Argon
        self.assertLineList(lineList, expect)

    def testLampsKrypton(self):
        """Test that we can select Argon-I lines by lamp"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 0)  # Argon
        metadata.set("W_AITKRY", 1)  # Krypton
        species = ['KrI']
        self.config.lampElements = species
        lineList = self.makeLineList(lightSource='Kr', metadata=metadata)
        expect = [ll for ll in self.contents if ll.description in species]
        self.assertEqual(1, len(expect))
        self.assertLineList(lineList, expect)

    def testLampsXenon(self):
        """Test that we can select Argon-I lines by lamp"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 0)  # Argon
        metadata.set("W_AITKRY", 0)  # Krypton
        metadata.set("W_AITXEN", 1)  # Xenon
        species = ['XeI']
        self.config.lampElements = species
        lineList = self.makeLineList(lightSource='Xe', metadata=metadata)
        expect = [ll for ll in self.contents if ll.description in species]
        self.assertEqual(1, len(expect))
        self.assertLineList(lineList, expect)

    def testLampsHgCd(self):
        """Test that we can select Mercury-Cadmium lines by lamp"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 0)  # Argon
        metadata.set("W_AITKRY", 0)  # Krypton
        metadata.set("W_AITHGC", 1)  # Mercury-Cadmium
        species = ['ArI', 'HgI', 'HgII']
        self.config.lampElements = species
        lineList = self.makeLineList(lightSource='HgCd', metadata=metadata)
        expect = [ll for ll in self.contents if ll.description in species]
        assert len(expect) == 4  # Two lines are Mercury, two are Argon
        self.assertLineList(lineList, expect)

    def testGetLampInfoNoLampsNoSky(self):
        """Test that no lamps are retrieved when no lamps are set"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 0)  # Argon
        metadata.set("W_AITKRY", 0)  # Krypton
        metadata.set("W_AITHGC", 0)  # Mercury-Cadmium
        config = ReadLineListConfig()
        config.assumeSkyIfNoLamps = False
        task = ReadLineListTask(config=config)
        lampInfo = task.getLampInfo(metadata)
        self.assertFalse(lampInfo.lamps)

    def testGetLampInfoNoLampsWithSky(self):
        """Test that no lamps are retrieved when no lamps are set"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 0)  # Argon
        metadata.set("W_AITKRY", 0)  # Krypton
        metadata.set("W_AITHGC", 0)  # Mercury-Cadmium
        config = ReadLineListConfig()
        config.assumeSkyIfNoLamps = True
        task = ReadLineListTask(config=config)
        lampInfo = task.getLampInfo(metadata)
        expectedSource = {'sky'}
        self.assertEqual(lampInfo.lamps, expectedSource)
        expectedLampElements = {"OI", "NaI", "OH"}
        self.assertEqual(lampInfo.lampElements, expectedLampElements)

    def testDefaultLightSources(self):
        """Test expected light sources are listed in default configuration"""
        config = ReadLineListConfig()
        config.lightSources = ["Ne", "Xe", "HgAr", "Kr", "Ar", "HgCd", "Quartz"]
        config.validate()

    def testInvalidLightSource(self):
        """Test that a light source that is not listed in lightSourceMap is trapped"""
        config = ReadLineListConfig()
        config.lightSources = ['Invalid']
        config.lightSourceMap = {'Valid1': 'a', 'Valid2': 'b'}
        with self.assertRaises(RuntimeError):
            config.validate()

    def testValidLightSource(self):
        """Test that light sources that are correctly listed in lightSourceMap is accepted"""
        config = ReadLineListConfig()
        config.lightSources = ['Ar', 'Ne']
        config.lightSourceMap = {'Ar': 'Ar.txt', 'Ne': 'Ne.txt'}
        config.validate()

    def testfilterByLampElements(self):
        """Tests that the correct lines are selected
        for the given line elements,
        even when the element names start with the same characters
        """
        task = ReadLineListTask()
        refLines = [
            ReferenceLine('HI', 123.456, 1000, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('HII', 456.789, 1000, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('ArI', 567.890, 999, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('HgII', 890.123, 123, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('HgI', 901.123, 14, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('OH', 921.123, 14, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('OI', 931.123, 14, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('Na', 941.123, 14, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
            ReferenceLine('NI', 951.123, 14, ReferenceLineStatus.GOOD,
                          "UNKNOWN", ReferenceLineSource.NONE),
        ]

        lines = ReferenceLineSet.fromRows(refLines)
        filteredLines = task.filterByLampElements(lines, ['H'])
        self.assertLineList(filteredLines, lines[0:2])

        filteredLines = task.filterByLampElements(lines, ['HI'])
        self.assertLineList(filteredLines, lines[0:1])

        filteredLines = task.filterByLampElements(lines, ['Hg'])
        self.assertLineList(filteredLines, lines[3:5])

        filteredLines = task.filterByLampElements(lines, ['ArI'])
        self.assertLineList(filteredLines, lines[2:3])

        filteredLines = task.filterByLampElements(lines, ['HgI'])
        self.assertLineList(filteredLines, lines[4:5])

        filteredLines = task.filterByLampElements(lines, ['HgII'])
        self.assertLineList(filteredLines, lines[3:4])

        filteredLines = task.filterByLampElements(lines, ['Hg', 'Ar'])
        self.assertLineList(filteredLines, lines[2:5])

        filteredLines = task.filterByLampElements(lines, ['OH'])
        self.assertLineList(filteredLines, lines[5:6])

        filteredLines = task.filterByLampElements(lines, ['N'])
        self.assertLineList(filteredLines, lines[8:9])

    def testMinIntensity(self):
        """Test that we can select lines by applying minIntensity cut"""
        self.config.minIntensity = 1000
        lineList = self.makeLineList()
        expect = [ll for ll in self.contents if ll.intensity >= self.config.minIntensity]
        assert len(expect) == 5
        self.assertLineList(lineList, expect)

    def testDetectorMap(self):
        """Test that we can get a wavelength-filtered lineList"""
        minWl = 400.0
        maxWl = 950.0
        synth = SyntheticConfig()
        detMap = makeSyntheticDetectorMap(synth, minWl, maxWl)
        lineList = self.makeLineList(detectorMap=detMap)
        expect = [ll for ll in self.contents if ll.wavelength > minWl and ll.wavelength < maxWl]
        for ff in synth.fiberId:
            self.assertLineList(lineList, expect)

    def testDuplicates(self):
        """Tests that duplicate lines (according to wavelength) are removed."""
        dupWavelength = 123.456

        self.contents = [
            Line(dupWavelength, 1000, "NeI", 0),
            Line(dupWavelength, 1000, "HgI", 0),
            Line(567.890, 999, "ArI", 0),
        ]
        self.config.exclusionRadius = 1.0
        lines = self.makeLineList()

        badLines = lines[lines.status == ReferenceLineStatus.BLEND]
        self.assertEqual(len(badLines), 1)
        self.assertEqual(badLines[0].wavelength, dupWavelength)

    def testDuplicatesHgArHgCd(self):
        """Tests whether the combination of HgAr and HgCd active lamps
        result in no duplicate lines being retrieved"""
        metadata = PropertyList()
        metadata.set("W_AITNEO", 0)  # Neon
        metadata.set("W_AITARG", 0)  # Argon
        metadata.set("W_AITKRY", 0)  # Krypton
        metadata.set("W_AITHGA", 1)  # Mercury-Argon
        metadata.set("W_AITHGC", 1)  # Mercury-Cadmium

        lines = ReadLineListTask(name="readLineList").run(metadata=metadata)

        # Check that duplicate lines are marked for rejection
        goodLines = lines[lines.status == ReferenceLineStatus.GOOD]
        uniqueWavelengths, counts = np.unique(goodLines.wavelength,
                                              return_counts=True)
        duplicateLines = uniqueWavelengths[counts > 1]
        self.assertTrue(len(duplicateLines) == 0, f'Duplicate lines found: {duplicateLines}')


class TestMemory(lsst.utils.tests.MemoryTestCase):
    pass


def setup_module(module):
    lsst.utils.tests.init()


if __name__ == "__main__":
    runTests(globals())
