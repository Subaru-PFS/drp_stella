from typing import overload, Tuple, Union
import numpy as np
from lsst.afw.math import (
    PolynomialFunction1D,
    BasePolynomialFunction2D,
    PolynomialFunction2D,
    Chebyshev1Function2D,
)
from lsst.geom import Box2D, Point2D, AffineTransform

class NormalizedPolynomial1D(PolynomialFunction1D):
    @overload
    def __init__(self, order: int, min: float = -1.0, max: float = 1.0): ...
    @overload
    def __init__(self, params: np.ndarray, min: float = -1.0, max: float = 1.0): ...
    @overload
    def __call__(self, x: float) -> float: ...
    @overload
    def __call__(self, x: np.ndarray) -> np.ndarray: ...
    def clone(self) -> "NormalizedPolynomial1D": ...
    def getOrder(self) -> int: ...
    def getDFuncDParameters(self) -> np.ndarray: ...
    def getMin(self) -> float: ...
    def getMax(self) -> float: ...

class NormalizedPolynomial2D(BasePolynomialFunction2D):
    @overload
    def __init__(self, order: int, range: Box2D = Box2D(Point2D(-1, -1), Point2D(1, 1))): ...
    @overload
    def __init__(self, params: np.ndarray, range: Box2D = Box2D(Point2D(-1, -1), Point2D(1, 1))): ...
    @overload
    def __call__(self, x: float, y: float) -> float: ...
    @overload
    def __call__(self, x: np.ndarray, y: np.ndarray) -> np.ndarray: ...
    def clone(self) -> "NormalizedPolynomial2D": ...
    def getOrder(self) -> int: ...
    def getDFuncDParameters(self) -> np.ndarray: ...
    def getXYRange(self) -> Box2D: ...

def evaluatePolynomial(
    poly: Union[Chebyshev1Function2D, PolynomialFunction2D, NormalizedPolynomial2D],
    x: np.ndarray,
    y: np.ndarray,
) -> np.ndarray: ...
def evaluateAffineTransform(
    transform: AffineTransform, x: np.ndarray, y: np.ndarray
) -> Tuple[np.ndarray, np.ndarray]: ...
def solveLeastSquaresDesign(
    design: np.ndarray, meas: np.ndarray, err: np.ndarray, threshold: float = 1.0e-6
) -> np.ndarray: ...
