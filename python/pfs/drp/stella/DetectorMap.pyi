from typing import Iterable, Optional, overload
import numpy as np
from numpy.typing import ArrayLike
from astropy.io.fits import HDUList

from lsst.geom import Box2I, Point2D
from lsst.afw.image import VisitInfo
from lsst.daf.base import PropertySet
from lsst.afw.display import Display

class DetectorMap:
    def clone(self) -> DetectorMap: ...
    def getBBox(self) -> Box2I: ...
    @property
    def bbox(self) -> Box2I: ...
    def getFiberId(self) -> np.ndarray: ...
    @property
    def fiberId(self) -> np.ndarray: ...
    def getNumFibers(self) -> int: ...
    def __len__(self) -> int: ...
    def __contains__(self) -> bool: ...
    def applySlitOffset(self, spatial: float, spectral: float): ...
    def getSpatialOffsets(self) -> np.ndarray: ...
    def getSpatialOffset(self, fiberId: int) -> float: ...
    def getSpectralOffsets(self) -> np.ndarray: ...
    def getSpectralOffset(self, fiberId: int) -> float: ...
    @overload
    def setSlitOffsets(self, spatial: np.ndarray, spectral: np.ndarray): ...
    @overload
    def setSlitOffsets(self, fiberId: int, spatial: float, spectral: float): ...
    @overload
    def getXCenter(self) -> np.ndarray: ...
    @overload
    def getXCenter(self, fiberId: int) -> np.ndarray: ...
    @overload
    def getXCenter(self, fiberId: int, row: float) -> float: ...
    @overload
    def getXCenter(self, fiberId: int, row: np.ndarray) -> np.ndarray: ...
    @overload
    def getXCenter(self, fiberId: np.ndarray, row: np.ndarray) -> np.ndarray: ...
    @overload
    def getWavelength(self) -> np.ndarray: ...
    @overload
    def getWavelength(self, fiberId: int) -> np.ndarray: ...
    @overload
    def getWavelength(self, fiberId: int, row: float) -> float: ...
    def getDispersionAtCenter(self, fiberId: int) -> float: ...
    @overload
    def getDispersion(self, fiberId: float, wavelength: float, dWavelength: float = 0.1) -> float: ...
    @overload
    def getDispersion(
        self, fiberId: np.ndarray, wavelength: np.ndarray, dWavelength: float = 0.1
    ) -> np.ndarray: ...
    def findFiberId(self, point: Point2D) -> int: ...
    @overload
    def findPoint(self, fiberId: int, wavelength: float, throwOnError: bool = False) -> Point2D: ...
    @overload
    def findPoint(self, fiberId: int, wavelength: np.ndarray) -> np.ndarray: ...
    @overload
    def findPoint(self, fiberId: np.ndarray, wavelength: np.ndarray) -> np.ndarray: ...
    @overload
    def findWavelength(self, fiberId: int, row: float, throwOnError: bool = False) -> float: ...
    @overload
    def findWavelength(self, fiberId: int, row: np.ndarray) -> np.ndarray: ...
    @overload
    def findWavelength(self, fiberId: np.ndarray, row: np.ndarray) -> np.ndarray: ...
    def getVisitInfo(self) -> VisitInfo: ...
    def setVisitInfo(self, visitInfo: VisitInfo): ...
    @property
    def visitInfo(self) -> VisitInfo: ...
    def getMetadata(self) -> PropertySet: ...
    @property
    def metadata(self) -> PropertySet: ...
    @classmethod
    def fromFits(cls, fits: HDUList) -> "DetectorMap": ...
    def toFits(self) -> HDUList: ...
    @classmethod
    def readFits(cls, pathName: str, hdu=None, flags=None) -> "DetectorMap": ...
    def writeFits(self, pathName: str, flags=None): ...
    @classmethod
    def fromBytes(cls, string: str) -> "DetectorMap": ...
    def toBytes(self) -> bytes: ...
    def display(
        self,
        display: Display,
        fiberId: Optional[Iterable[int]] = None,
        wavelengths: Optional[ArrayLike] = None,
        ctype: str = "green",
        plotTraces: bool = True,
    ): ...
