from pfs.datamodel.masks import MaskHelper
from pfs.datamodel.target import Target
from pfs.datamodel.wavelengthArray import WavelengthArray
from pfs.drp.stella.datamodel.pfsFiberArray import PfsSimpleSpectrum

import astropy.io.fits
import numpy as np
import scipy.interpolate

import os
import pickle

__all__ = ("FluxModelInterpolator",)


class FluxModelInterpolator:
    """Model spectrum interpolator.

    This class interpolates a spectrum at a point in the parameter space.
    (It is not an interpolation in the wavelength space.)

    Parameters
    ----------
    interpolator : `scipy.interpolate.RBFInterpolator`
        Instance of ``RBFInterpolator``.
    teffScale : `float`
        Constant by which ``teff`` (see ``self.interpolator()``)
        is multiplied before being passed to ``interpolator``.
    loggScale : `float`
        Constant by which ``logg`` (see ``self.interpolator()``)
        is multiplied before being passed to ``interpolator``.
    mScale : `float`
        Constant by which ``m`` (see ``self.interpolator()``)
        is multiplied before being passed to ``interpolator``.
    alphaScale : `float`
        Constant by which ``alpha`` (see ``self.interpolator()``)
        is multiplied before being passed to ``interpolator``.
    fluxScale : `float`
        Constant by which outputs of ``interpolator`` are multiplied.
    lenWavelength : `int`
        Length of wavelength array.
    wcs : `astropy.io.fits.Header`
        FITS header with WCS specifying wavelength array.
    """

    def __init__(
            self,
            interpolator: scipy.interpolate.RBFInterpolator,
            teffScale: float,
            loggScale: float,
            mScale: float,
            alphaScale: float,
            fluxScale: float,
            lenWavelength: int,
            wcs: astropy.io.fits.Header) -> None:
        self.interpolator = interpolator
        self.teffScale = teffScale
        self.loggScale = loggScale
        self.mScale = mScale
        self.alphaScale = alphaScale
        self.fluxScale = fluxScale
        self.wavelength = WavelengthArray.fromFitsHeader(wcs, lenWavelength, dtype=float)

    @classmethod
    def fromFluxModelData(cls, path: str) -> "FluxModelInterpolator":
        """Read the RBF model in ``fluxmodeldata`` package.

        The RBF model must be generated in advance
        by `makeFluxModelInterpolator.py`.

        Parameters
        ----------
        path : `str`
            Path to ``fluxmodeldata`` package.

        Returns
        -------
        fluxModelInterpolator : `FluxModelInterpolator`
            The model.
        """
        filePath = os.path.join(path, "interpolator.pickle")
        if not os.path.exists(filePath):
            raise RuntimeError(
                f"'{filePath}' not found. Run `makeFluxModelInterpolator.py` to generate it."
            )
        return cls.fromPickle(filePath)

    @classmethod
    def fromPickle(cls, path: str) -> "FluxModelInterpolator":
        """Read an RBF model from a pickle file.

        Parameters
        ----------
        path : `str`
            File name of an RBF model
            generated by `makeFluxModelInterpolator.py`.

        Returns
        -------
        fluxModelInterpolator : `FluxModelInterpolator`
            The model.
        """
        with open(path, "rb") as f:
            obj = pickle.load(f)
            return cls(
                obj["interpolator"],
                obj["teffScale"],
                obj["loggScale"],
                obj["mScale"],
                obj["alphaScale"],
                obj["fluxScale"],
                obj["lenWavelength"],
                astropy.io.fits.Header.fromstring(obj["wcs"]),
            )

    def interpolate(self, teff: float, logg: float, m: float, alpha: float) -> PfsSimpleSpectrum:
        """Generate an interpolated spectrum at a given parameter point.

        Parameters
        ----------
        teff : `float`
            Effective temperature in K for interpolation.
        logg : `float`
            Surface gravity in log(/(cm/s^2)) for interpolation.
        m : `float`
            Metallicity [Fe/H] for interpolation.
        alpha : `float`
            Alpha element index [alpha/Fe] for interpolation.

        Returns
        -------
        spectrum : `pfs.drp.stella.datamodel.pfsFiberArray.PfsSimpleSpectrum`
            Interpolated spectrum.
        """
        x = np.empty(shape=(1, 4), dtype=float)
        x[0, 0] = self.teffScale * teff
        x[0, 1] = self.loggScale * logg
        x[0, 2] = self.mScale * m
        x[0, 3] = self.alphaScale * alpha

        flux = self.interpolator(x)[0, :]
        flux *= self.fluxScale

        target = Target(0, 0, "0,0", 0)
        mask = np.zeros(shape=flux.shape, dtype=int)
        flags = MaskHelper()
        mask[:] = np.where(np.isfinite(flux), 0, flags.add("BAD"))

        return PfsSimpleSpectrum(target, self.wavelength, flux, mask, flags)
