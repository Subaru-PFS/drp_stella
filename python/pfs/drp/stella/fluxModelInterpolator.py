from pfs.datamodel.masks import MaskHelper
from pfs.datamodel.pfsSimpleSpectrum import PfsSimpleSpectrum
from pfs.datamodel.target import Target
from pfs.datamodel.wavelengthArray import WavelengthArray

from .utils import parallel

import astropy.io.fits
import numpy as np

import os
import pickle

__all__ = ("FluxModelInterpolator",)


class FluxModelInterpolator:
    """Model spectrum interpolator.

    This class interpolates a spectrum at a point in the parameter space.
    (It is not an interpolation in the wavelength space.)

    Parameters
    ----------
    model : `list` of `scipy.interpolate.Rbf`
        RBF model generated by `makeFluxModelInterpolator.py`.
        Each element (`Rbf`) of the list takes charge of the flux
        at one wavelength.
    wcs : `astropy.io.fits.Header`
        FITS header with WCS specifying wavelength array.
    """

    def __init__(self, model, wcs):
        self.model = model
        self.wavelength = WavelengthArray.fromFitsHeader(wcs, len(model), dtype=float)

    @classmethod
    def fromFluxModelData(cls, path):
        """Read the RBF model in ``fluxmodeldata`` package.

        The RBF model must be generated in advance
        by `makeFluxModelInterpolator.py`.

        Parameters
        ----------
        path : `str`
            Path to ``fluxmodeldata`` package.

        Returns
        -------
        fluxModelInterpolator : `FluxModelInterpolator`
            The model.
        """
        filePath = os.path.join(path, "interpolator.pickle")
        if not os.path.exists(filePath):
            raise RuntimeError(
                f"'{filePath}' not found. Run `makeFluxModelInterpolator.py` to generate it."
            )
        return cls.fromPickle(filePath)

    @classmethod
    def fromPickle(cls, path):
        """Read an RBF model from a pickle file.

        Parameters
        ----------
        path : `str`
            File name of an RBF model
            generated by `makeFluxModelInterpolator.py`.

        Returns
        -------
        fluxModelInterpolator : `FluxModelInterpolator`
            The model.
        """
        with open(path, "rb") as f:
            obj = pickle.load(f)
            return cls(obj["interpolator"], astropy.io.fits.Header.fromstring(obj["wcs"]))

    def interpolate(self, teff, logg, metal, alpha, nProcs=1):
        """Generate an interpolated spectrum at a given parameter point.

        Parameters
        ----------
        teff : `float`
            Effective temperature in K for interpolation.
        logg : `float`
            Surface gravity in log(/(cm/s^2)) for interpolation.
        metal : `float`
            Metallicity [Fe/H] for interpolation.
        alpha : `float`
            Alpha element index [alpha/Fe] for interpolation.
        nProcs : `int`, optional
            Number of processes to use.

        Returns
        -------
        spectrum : `pfs.datamodel.pfsSimpleSpectrum.PfsSimpleSpectrum`
            Interpolated spectrum.
        """
        teff_over_1e3 = teff / 1e3

        def doInterpolation(interpolator):
            """Interpolates the flux (scalar) at a specific wavelength.

            Parameters
            ----------
            interpolator : `scipy.interpolate.Rbf`
                Interpolator in charge of a specific wavelength.

            Returns
            -------
            flux : `float`
                Interpolated flux (scalar).
            """
            return interpolator(teff_over_1e3, logg, metal, alpha)

        flux = parallel.parallel_map(doInterpolation, self.model, n_procs=nProcs)
        flux = np.asarray(flux)

        target = Target(0, 0, "0,0", 0)
        mask = np.zeros(shape=flux.shape, dtype=int)
        flags = MaskHelper()
        mask[:] = np.where(np.isfinite(flux), 0, flags.add("BAD"))

        return PfsSimpleSpectrum(target, self.wavelength, flux, mask, flags)
